name: Continuous Integration
on: [push, pull_request]
jobs:
  build:
    name: Build (${{matrix.config}})
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v2
        with:
          path: source
          fetch-depth: 0
      - name: Fetch code-signing key
        env:
          CODE_SIGNING_PFX_BASE64: ${{ secrets.CODE_SIGNING_KEY_PFX_BASE64 }}
        id: FetchKey
        if: ${{ (github.repository == 'OpenKneeboard/OpenKneeboard') && (github.event_name == 'push')}}
        shell: pwsh
        run: |
          $pfxPath="${{runner.temp}}/MyCert.pfx"
          [System.Convert]::FromBase64String($Env:CODE_SIGNING_PFX_BASE64) | Set-Content "$pfxPath" -AsByteStream
          Add-Content $Env:GITHUB_OUTPUT "HAVE_KEY=true"
          Add-Content $Env:GITHUB_OUTPUT "PATH=$pfxPath"
      - name: Make build directory
        run: cmake -E make_directory build
      - name: Configure
        working-directory: build
        shell: pwsh
        run: |
          $args = @(
            "-DGITHUB_REF_TYPE=${{github.ref_type}}",
            "-DGITHUB_REF_NAME=${{github.ref_name}}"
          )
          if ( "${{steps.FetchKey.outputs.HAVE_KEY}}" -eq "true" ) {
            echo "::notice::Signing build targets"
            $args += "-DSIGNTOOL_KEY_ARGS=/f;${{steps.FetchKey.outputs.PATH}}" `
          } else {
            echo "::warning::Not signing targets"
          }
          cmake ${{github.workspace}}/source @args
      - name: Build
        id: build
        working-directory: build
        run: |
          # Build
          echo "::group::Running cmake --build"
          cmake --build . `
            --config ${{matrix.config}} `
            --parallel `
            -- `
            /p:CL_MPCount=
          echo "::endgroup::"
          echo "::group::Setting version"
          $version="$(Get-Content version.txt)"
          Add-Content $Env:GITHUB_OUTPUT "VERSION=${version}"
          echo "::endgroup::"
      - name: Create MSI
        working-directory: build
        id: createMSI
        run: |
          # Create MSI
          cmake --build . `
            --config ${{matrix.config}} `
            --target package
          $installer="OpenKneeboard-$(Get-Content version.txt).msi"
          Add-Content $Env:GITHUB_OUTPUT "MSI_NAME=$installer"
          $installer=(Get-ChildItem $installer).FullName
          Add-Content $Env:GITHUB_OUTPUT "MSI_PATH=$installer"
      - name: Sign MSI
        working-directory: build
        if: ${{steps.FetchKey.outputs.HAVE_KEY}}
        run: |
          # Known path for the GitHub Actions windows 2022 runner, may need updating
          & 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x86\signtool.exe' `
            sign `
            /t http://timestamp.digicert.com `
            /fd SHA256 `
            /f "${{steps.FetchKey.outputs.PATH}}" `
            "${{steps.createMSI.outputs.MSI_PATH}}"
      - name: Attach MSI
        if: ${{matrix.config != 'Debug' }}
        uses: actions/upload-artifact@v2
        with:
          name: OpenKneeboard-GHA-${{github.run_number}}.msi
          path: ${{steps.createMSI.outputs.MSI_PATH}}
      - name: Install debug symbols
        id: installDebugSymbols
        working-directory: build
        shell: pwsh
        run: |
          $prefix="${{runner.temp}}/OpenKneeboard-${{steps.build.outputs.VERSION}}-Symbols"

          cmake --install . `
            --config ${{matrix.config}} `
            --component DebugSymbols `
            --prefix "${prefix}"

          Add-Content $Env:GITHUB_OUTPUT "PREFIX=$prefix"
      - name: Attach debug symbols
        if: ${{matrix.config != 'Debug' }}
        uses: actions/upload-artifact@v2
        with:
          name: OpenKneeboard-GHA-${{github.run_number}}-Symbols
          path: ${{steps.installDebugSymbols.outputs.PREFIX}}
    strategy:
      matrix:
        config: [RelWithDebInfo, Debug]
  release:
    name: Prepare Draft Release
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    needs: [build]
    steps:
      - uses: actions/checkout@v2
        with:
          path: source
      - name: Generate release notes
        run: sed 's/@TAG@/${{github.ref_name}}/g' source/.github/workflows/release_notes.md > ${{runner.temp}}/release_notes.md
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          path: ${{runner.temp}}/artifacts
      - name: Display downloaded files
        run: ls -R
        working-directory: ${{runner.temp}}/artifacts
      - name: Create symbols zip file
        id: symbolsZip
        run: |
          # Create Symbols Zip
          ZIP_ARTIFACT="-Symbols"
          cd "${{runner.temp}}/artifacts/OpenKneeboard-GHA-${{github.run_number}}${ZIP_ARTIFACT}"
          ZIP_PATH="${{runner.temp}}/OpenKneeboard-${{github.ref_name}}${ZIP_ARTIFACT}.zip"
          zip -r "${ZIP_PATH}" ./
          echo "PATH=${ZIP_PATH}" >> "${GITHUB_OUTPUT}"
      - name: Rename MSI
        id: msi
        run: |
          cd "${{runner.temp}}/artifacts/OpenKneeboard-GHA-${{github.run_number}}.msi"
          MSI_PATH="${{runner.temp}}/OpenKneeboard-${{github.ref_name}}.msi"
          mv *.msi "${MSI_PATH}"
          echo "PATH=${MSI_PATH}" >> "${GITHUB_OUTPUT}"
      - name: Create draft release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_name: Release ${{github.ref_name}}
          tag_name: ${{github.ref_name}}
          draft: true
          body_path: ${{runner.temp}}/release_notes.md
      - name: Attach MSI
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ${{steps.msi.outputs.PATH}}
          asset_name: OpenKneeboard-${{github.ref_name}}.msi
          asset_content_type: application/msi
      - name: Attach debug symbols
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ${{steps.symbolsZip.outputs.PATH}}
          asset_name: OpenKneeboard-${{github.ref_name}}-DebugSymbols.zip
          asset_content_type: application/zip
