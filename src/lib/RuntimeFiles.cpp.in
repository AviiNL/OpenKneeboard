#include <OpenKneeboard/RuntimeFiles.h>

namespace OpenKneeboard::RuntimeFiles {

const std::filesystem::path OPENXR_JSON("OpenKneeboard-OpenXR.json");
const std::filesystem::path QUICK_START_PDF("Quick Start.pdf");

const std::filesystem::path DCSWORLD_HOOK_DLL(
  "$<TARGET_FILE_NAME:OpenKneeboard-dcs-ext-dll>");

const std::filesystem::path DCSWORLD_HOOK_LUA(
  "$<TARGET_PROPERTY:OpenKneeboard-dcs-ext-lua,OUTPUT_NAME>");

const std::filesystem::path AUTODETECTION_DLL(
  "$<TARGET_FILE_NAME:OpenKneeboard-AutoDetect>");
  
const std::filesystem::path TABLET_PROXY_DLL(
  "$<TARGET_FILE_NAME:OpenKneeboard-TabletProxy>");

const std::filesystem::path WINDOW_CAPTURE_HOOK_DLL(
  "$<TARGET_FILE_NAME:OpenKneeboard-WindowCaptureHook>");

const std::filesystem::path NON_VR_D3D11_DLL(
  "$<TARGET_FILE_NAME:OpenKneeboard-nonvr-d3d11>");

const std::filesystem::path OCULUS_D3D11_DLL(
  "$<TARGET_FILE_NAME:OpenKneeboard-oculus-d3d11>");

const std::filesystem::path OCULUS_D3D12_DLL(
  "$<TARGET_FILE_NAME:OpenKneeboard-oculus-d3d12>");

const std::filesystem::path OPENXR_DLL(
  "$<TARGET_FILE_NAME:OpenKneeboard-OpenXR>");

const std::filesystem::path OPENXR_REGISTER_LAYER_HELPER(
  "$<TARGET_FILE_NAME:OpenKneeboard-OpenXR-Helper>");

const std::filesystem::path SET_DESIRED_ELEVATION_HELPER(
  "$<TARGET_FILE_NAME:OpenKneeboard-Set-Desired-Elevation-Helper>");

// TODO (CMake 3.24+): use PATH:GET_FILENAME generator expression instead
// of a custom target property
#ifdef _WIN64
const std::filesystem::path WINDOW_CAPTURE_HOOK_32BIT_HELPER(
  "$<GENEX_EVAL:$<TARGET_PROPERTY:OpenKneeboard-WindowCaptureHook-Helper32,IMPORTED_FILENAME>>");
#endif

}
