#include <OpenKneeboard/RuntimeFiles.hpp>

namespace OpenKneeboard::RuntimeFiles {
const std::filesystem::path QUICK_START_PDF("Quick Start.pdf");

const std::filesystem::path DCSWORLD_HOOK_DLL(
  "$<TARGET_FILE_NAME:OpenKneeboard-lua-api>");

const std::filesystem::path DCSWORLD_HOOK_LUA(
  "$<TARGET_PROPERTY:dcs-lua-ext,OUTPUT_NAME>");

const std::filesystem::path AUTODETECTION_DLL(
  "$<TARGET_FILE_NAME:OpenKneeboard-AutoDetect>");

const std::filesystem::path TABLET_PROXY_DLL(
  "$<TARGET_FILE_NAME:OpenKneeboard-TabletProxy>");

const std::filesystem::path WINDOW_CAPTURE_HOOK_DLL(
  "$<TARGET_FILE_NAME:OpenKneeboard-WindowCaptureHook>");

const std::filesystem::path NON_VR_D3D11_DLL(
  "$<TARGET_FILE_NAME:OpenKneeboard-nonvr-d3d11>");

const std::filesystem::path OCULUS_D3D11_DLL(
  "$<TARGET_FILE_NAME:OpenKneeboard-oculus-d3d11>");

const std::filesystem::path OPENXR_64BIT_JSON("OpenKneeboard-OpenXR.json");
const std::filesystem::path OPENXR_64BIT_DLL(
  "$<TARGET_FILE_NAME:OpenKneeboard-OpenXR>");

const std::filesystem::path OPENXR_32BIT_JSON("OpenKneeboard-OpenXR32.json");
const std::filesystem::path OPENXR_32BIT_DLL(
  "$<PATH:GET_FILENAME,$<TARGET_PROPERTY:OpenKneeboard-OpenXR32,IMPORTED_LOCATION>>");


const std::filesystem::path OPENXR_REGISTER_LAYER_HELPER(
  "$<TARGET_FILE_NAME:OpenKneeboard-OpenXR-Helper>");

const std::filesystem::path SET_DESIRED_ELEVATION_HELPER(
  "$<TARGET_FILE_NAME:OpenKneeboard-Set-Desired-Elevation-Helper>");

#ifdef _WIN64
// clang-format off
const std::filesystem::path WINDOW_CAPTURE_HOOK_32BIT_HELPER(
  "$<PATH:GET_FILENAME,$<TARGET_PROPERTY:OpenKneeboard-WindowCaptureHook-Helper32,IMPORTED_LOCATION>>");
// clang-format on
#endif

}// namespace OpenKneeboard::RuntimeFiles
